            Dynamic Blogging System Created Using Django Web Framework

Django is one of the most powerful web framework for creating complex websites. Some of the well know sites 
powered by Django include but not limited to Bitbucket, Instagram, Mozilla and Washington Times. In this 
project I am trying to create a blog system that is powered by Django, python and front end I am using 
Twitter Bootstrap

Requirement

-Django version 1.10.1
-Python 2.7.6

So far this project include the following completed features:


1) A blog page the shows 5 recent post based on published date. The Post are in summary(post except).Here 
        is a sample code:
              {% extends "klab/base.html" %}
                 {% block content %}
                  {% for post in posts %}
                      <div class="post">
                           <h1>
                           <a href="{% url 'post_detail' pk=post.pk %}">{{ post.title }}</a>
                           </h1>
                          <p>{{  post.text |truncatewords:"100" }}<a href="{% url 'post_detail' pk=post.pk %}"> read more...</a></p>
                          <div class="date">
      
                         </div>
                         </div>
                 {% endfor %}
            {% endblock %}
       in the above code, every post is truncated to 100 words and you can click read more to read the full post.


2) Another feature that is implemented in this system is the ability to Register, Login and Logout user. Here is a sample
         register code in views.py 

def register_page(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = User.objects.create_user(
                username = form.cleaned_data['username'],
                password = form.cleaned_data['password1'],
                email = form.cleaned_data['email']
            )
            return HttpResponseRedirect('/register/success/')
    else:
        form = RegistrationForm()
    variables = RequestContext(request, {
        'form': form
    })
    return render(request, 'registration/register_page.html', {'form': form})

3) Another feature in this blog system is the ability to get our archives from the database dynamically, now our archives are listed on our 
sidebar. Here is the code:


 <div class="col-sm-3 offset-sm-1 blog-sidebar">
                <div class="sidebar-module sidebar-module-inset">
                    <h4>Archives</h4>
                    <div class="post">
                        {% for post in posts %}
                        <ol class="list-unstyled">
                            <li><a href="{% url 'post_detail' pk=post.pk %}">{{ post.published_date }}</a></li>
                        </ol>
                         {% endfor %}
                    </div>
                </div>
            </div> 

4) I have added another feature to this project. In every blog/website you need a way for your customer to contact you. Well I have added a simple
contact form to our blog system. Upon successful form submission, the sender is greeted by a success message. Here is our code that goes into the
views.py 


def contact_page(request):
    if request.method =='POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            subject = form.cleaned_data['subject']
            message = form.cleaned_data['message']
            sender = form.cleaned_data['sender']
            cc_myself = form.cleaned_data['cc_myself']
            recipients = ['info@example.com']
            if cc_myself:
                recipients.append(sender)
                send_mail(subject, message, sender, recipients)
            
            return HttpResponseRedirect( '/contact/success/')
    else:
        form = ContactForm()
    variables = RequestContext(request, {
        'form':form
    })
    return render(request, 'klab/contact_page.html', {'form':form}) 



I will keep updating  this project with new features as I keep working on it.

NOTE:
-If you decided to use this code to implement you system recall to change DEBUG MODE to false in settings.py due to security reason.
-Then make sure you create an automated Test, this will help you to fix bugs and beside its a good way of programming

Otherwise Download and an improve on this code depending your needs
